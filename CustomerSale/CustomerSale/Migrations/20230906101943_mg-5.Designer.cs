// <auto-generated />
using System;
using CustomerSale.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerSale.Migrations
{
    [DbContext(typeof(CustomerSaleContext))]
    [Migration("20230906101943_mg-5")]
    partial class mg5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CustomerSale.Models.AttendanceModel", b =>
                {
                    b.Property<string>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateAttended")
                        .HasColumnType("datetime");

                    b.Property<string>("Hours")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("AttendanceId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("attendance");
                });

            modelBuilder.Entity("CustomerSale.Models.CollegeModel", b =>
                {
                    b.Property<string>("CollegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("CollegeId");

                    b.ToTable("college");
                });

            modelBuilder.Entity("CustomerSale.Models.CourseModel", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("CourseId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("CustomerSale.Models.DepartmentModel", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ChairId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("DepartmentId");

                    b.ToTable("department");
                });

            modelBuilder.Entity("CustomerSale.Models.EnrollmentModel", b =>
                {
                    b.Property<string>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("DateEnrolled")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("FinalGrade")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("MidtermGrade")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("enrollment");
                });

            modelBuilder.Entity("CustomerSale.Models.InstructorModel", b =>
                {
                    b.Property<string>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CollegeId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("InstructorId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("instructor");
                });

            modelBuilder.Entity("CustomerSale.Models.ScheduleModel", b =>
                {
                    b.Property<string>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("ScheduleId");

                    b.ToTable("schedule");
                });

            modelBuilder.Entity("CustomerSale.Models.SectionModel", b =>
                {
                    b.Property<string>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("SectionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("SectionModel");
                });

            modelBuilder.Entity("CustomerSale.Models.StudentModel", b =>
                {
                    b.Property<string>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Varchar(150)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CollegeId")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar(150)");

                    b.HasKey("StudentId");

                    b.HasIndex("CollegeId");

                    b.ToTable("student");
                });

            modelBuilder.Entity("CustomerSale.Models.AttendanceModel", b =>
                {
                    b.HasOne("CustomerSale.Models.SectionModel", "section_table")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerSale.Models.StudentModel", "student_table")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("section_table");

                    b.Navigation("student_table");
                });

            modelBuilder.Entity("CustomerSale.Models.EnrollmentModel", b =>
                {
                    b.HasOne("CustomerSale.Models.SectionModel", "section_table")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerSale.Models.StudentModel", "student_table")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("section_table");

                    b.Navigation("student_table");
                });

            modelBuilder.Entity("CustomerSale.Models.InstructorModel", b =>
                {
                    b.HasOne("CustomerSale.Models.CollegeModel", "college_table")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerSale.Models.DepartmentModel", "department_table")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("college_table");

                    b.Navigation("department_table");
                });

            modelBuilder.Entity("CustomerSale.Models.SectionModel", b =>
                {
                    b.HasOne("CustomerSale.Models.CourseModel", "course_table")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerSale.Models.InstructorModel", "instructor_table")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CustomerSale.Models.ScheduleModel", "schedule_table")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("course_table");

                    b.Navigation("instructor_table");

                    b.Navigation("schedule_table");
                });

            modelBuilder.Entity("CustomerSale.Models.StudentModel", b =>
                {
                    b.HasOne("CustomerSale.Models.CollegeModel", "college_table")
                        .WithMany()
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("college_table");
                });
#pragma warning restore 612, 618
        }
    }
}
